/*
    mverb.cpp

    Copyright (C) 2006 Michael Gogins

    This file is part of Csound.

    The Csound Library is free software; you can redistribute it
    and/or modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    Csound is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with Csound; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
    02110-1301 USA
 */
#include "OpcodeBase.hpp"
#define GAMMA_H_INC_ALL 1
#include <Gamma/Gamma.h>

#include <cmath>

/**
 * Implements Jon Christopher Nelson's MVerb opcode in C++.
 * 
 * MVerb is a plugin that is based on a modified five-by-five 2D waveguide 
 * mesh developed in Csound within the Cabbage framework. MVerb is highly 
 * flexible and can generate compelling and unique reverberation effects 
 * ranging from traditional spaces to infinite morphing spaces or the 
 * simulation of metallic plates or cymbals. The plugin incorporates a 10-band
 * parametric EQ for timbral control and delay randomization to create more 
 * unusual effects.
 *
 * This opcode requires the Gamma library for audio signal processing.
 *
 * NOTES
 *
 * In MVerb.csd presets can be varied at run time but not stored under new 
 * names. Perhaps as VSTs they can be. 
 *
 * Nelson's paper talks about increasing channel counts, but I'm not sure how 
 * to do this with the correct signal routing. I suspect that stereo is a 
 * 2-cube or square, 4 channels would be a 4-cube, and so on. The number of 
 * values needing to be stored in presets would grow exponentially... not 
 * doing this, keeping to stereo here.
 *
 */
 
struct Preset {
    MYFLT number;
    MYFLT res1;
    MYFLT res2;   
    MYFLT res3;   
    MYFLT res4;
    MYFLT res5;
    MYFLT res6; 
    MYFLT res7;
    MYFLT res8;
    MYFLT res9;
    MYFLT res10;
    MYFLT res11;  
    MYFLT res12;   
    MYFLT res13; 
    MYFLT res14; 
    MYFLT res15;
    MYFLT res16;
    MYFLT res17;
    MYFLT res18;
    MYFLT res19;
    MYFLT res20;
    MYFLT res21;   
    MYFLT res22;   
    MYFLT res23; 
    MYFLT res24; 
    MYFLT res25;
    MYFLT FB;
    MYFLT DFact;
    MYFLT Q;
    MYFLT ERamp;
    MYFLT ERSelect;
    MYFLT EQSelect;
};

/*
 SEND_PRESET: ;1-16="Small Hall","Medium Hall","Large Hall","Huge Hall","Infinite Space","Dry Echos","Right","Comby 1","Comby 2","Octaves","TriTones","Big Dark","Metallic","Weird 1","Weird 2","Weird 3""Large Cymbal A","LargeCymbal B","Splash Cymbal A","Splash Cymbal B","Turkish Cymbal","Gong", "Small Gong","Metallic","Tubular Metallic")
 ;           N, set1, set2, set3, set4, set5, set6, set7, set8, set9, set10, set11, set12, set13, set14, set15, set16, set17, set18, set19, set20, set21, set22, set23, set24, set25, FBset, DFset, Qset, ERamp, ERSelect, EQselect)
 $SET_PRESET(1, 102, 435, 735, 76.8, 114, 669.2, 739.7, 843.6, 272.72, 114.3, 963.2, 250.3, 373.73, 842, 999, 621, 210, 183, 578, 313, 792, 159.3, 401.5, 733, 1010, .93, 1, 22, .9, 2, 1)
 $SET_PRESET(2, 57.8, 461.1, 141.6, 442.9, 395.4, 384.7, 156.3, 31.7, 47.7, 181.4, 82.3, 470.7, 283.7, 133.7, 128.5, 426.9, 274.1, 495, 112.3, 401.9, 126.5, 218.9, 374.8, 140.3, 171.3, .943, 1, .5, .9, 3, 1)
 $SET_PRESET(3, 23.24, 100.43, 45.58, 105.62, 226.26, 65.66, 216.33, 32.41, 244.91, 84.61, 349.42, 134.08, 444.19, 51.83, 32.42, 42.73, 125.7, 83.25, 23.83, 170.28, 116.83, 40.96, 53, 78.42, 29.42, .95, 1, .5, .9, 4, 1)
 $SET_PRESET(4, 3.24, 10.43, 5.58, 105.62, 16.26, 65.66, 216.33, 2.41, 244.91, 4.61, 349.42, 134.08, 444.191, 51.83, 32.42, 2.73, 25.7, 83.25, 3.83, 170.28, 6.83, 40.96, 13, 8.42, 20.42, .95, 1, .724, .8, 5, 1)
 $SET_PRESET(5, 3.24, 10.43, 5.58, 105.62, 16.26, 65.66, 216.33, 2.41, 244.91, 4.61, 349.42, 134.08, 444.191, 51.83, 32.42, 2.73, 25.7, 83.25, 3.83, 170.28, 6.83, 40.96, 13, 8.42, 20.42, 1, 1, .5, .5, 5, 1)
 $SET_PRESET(6, 200, 2000, 2, 2000, 200, 2000, 2, 200, 2, 2000, 2, 200, 2, 200, 2, 2000, 2, 200, 2, 2000, 200, 2000, 2, 2000, 200, .85, 1, .5, .9, 1, 1)
 $SET_PRESET(7, 4.4, 10.8, 33.9, 77.23, 243, 3.1, 7.5, 26.68, 64.9, 111.11, 2, 5.5, 17.3, 53, 97.2, 3.6, 7.53, 26.75, 67, 113.2, 4.57, 10.67, 33.25, 75.3, 248, .95, 1, 21, .9, 1, 2)
 $SET_PRESET(8, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, .99, 1, 3.85, .9, 1, 1)
 $SET_PRESET(9, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, .995, 1, 2.85, .9, 1, 1)
 $SET_PRESET(10, 320, 80, 320, 80, 2560, 640, 40, 2560, 10240, 80, 2560, 640, 160, 1280, 160, 640, 5120, 320, 40, 10240, 1280, 40, 5120, 320, 160, .995, 1, 70, .9, 1, 2)
 $SET_PRESET(11, 369.99, 92.5, 370, 185, 65.41, 32.7, 261.63, 46.25, 261.63, 1046.5, 739.99, 1479.98, 130.81, 65.41, 23.13, 92.5, 46.25, 130.81, 185, 32.7, 65.41, 130.81, 523.25, 184.99, 92.5, .975, 1, 90, .9, 1, 3)
 $SET_PRESET(12, 41, 3.84, 50.28, 2.38, 19.71, 3.83, 83.27, 16.93, 27.95, 4.33, 88.41, 39.93, 95.02, 93.99, 84.19, 3.38, 79.5, 69.39, 32.79, 8.32, 97.16, 3.23, 28.84, 8.46, 71.69, .96, 1, 4, .5, 10, 2)
 $SET_PRESET(13, 361.6, 66.9, 679.5, 251.6, 395.3, 166.4, 123.9, 314.6, 262.5, 182.9, 245.4, 40.4, 435.5, 253.9, 350.5, 527.1, 628.3, 365.2, 71.6, 699.6, 684.8, 560.1, 408.4, 55.4, 190, .995, 1, 35, .9, 3, 3)
 $SET_PRESET(14, 246.96, 246.84, 246.92, 247, 246.88, 164.83, 164.79, 164.81, 164.85, 164.77, 138.58, 138.57, 138.59, 138.61, 138.6, 196.06, 195.97, 196, 196.03, 195.94, 2.35, 6.62, 3.38, 5.01, 2.67, .99, 1, 16.75, .9, 1, 9)
 $SET_PRESET(15, 2, 150.1, 10.3, 150.3, 2.2, 150.5, 149.9, 149.5, 149.7, 150.8, 10.2, 109.2, 150, 149.3, 10.1, 150.7, 149.6, 149.4, 149.8, 150.6, 2.3, 150.4, 10, 150.2, 2.1, .995, 1, 25, .9, 9, 10)
 $SET_PRESET(16, 880, 587.33, 18.35, 523.25, 987.77, 698.46, 12.98, 9.72, 10.91, 739.99, 19.45, 9.18, 8.18, 8.66, 20.6, 783.99, 11.56, 10.3, 12.25, 659.25, 932.33, 554.36, 17.32, 622.25, 830.6, .995, 1, .5, 1.25, 6, 11)
 $SET_PRESET(17, 562, 4047, 6112, 4211, 640, 4333, 661, 6276, 745, 6399, 860, 6487, 445, 1011, 915, 1498, 896, 2720, 4001, 2912, 3872, 6144, 4735, 9920, 2473, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(18, 6154, 4559, 5043, 4399, 4740, 3839, 4829, 3656, 4649, 2577, 5106, 4309, 6343, 3378, 5478, 3286, 5269, 4230, 4122, 3126, 4026, 3048, 3965, 2897, 5806, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(19, 1868, 1136, 2557, 934, 1378, 1421, 487, 2026, 732, 3485, 1824, 2715, 2067, 2269, 1338, 2756, 891, 689, 3243, 1580, 1176, 2312, 1623, 2514, 2799, .993, 1, 15, 0, 1, 1)
 $SET_PRESET(20, 1135, 3815, 1442, 4126, 1857, 4623, 250, 2271, 287, 4681, 5151, 323, 2573, 381, 2990, 594, 5323, 627, 5761, 721, 3147, 3294, 4367, 3712, 3599, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(21, 1699, 2867, 309, 1871, 3540, 399, 2047, 3644, 503, 2920, 3733, 667, 2196, 4556, 922, 2269, 4587, 1037, 2415, 4430, 1449, 100, 2720, 1524, 194, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(22, 1397, 7046, 7145, 7302, 2803, 7346, 1395, 2442, 5618, 2793, 4198, 11111, 8845, 2435, 12675, 4135, 4693, 5563, 6715, 6740, 4733, 9008, 8700, 10315, 8957, .997, 1, 15, 0, 1, 1)
 $SET_PRESET(23, 1150, 2638, 4630, 1203, 2875, 4697, 1257, 547, 2917, 1357, 644, 3184, 1908, 717, 3532, 2014, 780, 3592, 2089, 991, 3834, 2167, 1082, 4280, 2551, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(24, 1538, 3268, 4500, 4511, 7620, 1818, 5762, 1313, 8902, 8123, 2222, 7200, 1435, 2253, 2345, 7652, 1111, 3342, 6671, 5669, 6359, 1515, 2626, 9821, 5589, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(25, 5801, 2555, 1062, 2988, 1163, 3191, 3438, 1266, 5357, 1391, 1537, 3870, 6775, 1752, 162, 316, 1899, 2141, 520, 6189, 3957, 771, 4389, 974, 4870, .979, 1, 15, 0, 1, 1)
 $SET_PRESET(26, 43, 427.33, 469.63, 636.8, 879, 1194.3, 1285, 1525, 1605.7, 1692.6, 1834, 1913.4, 2058, 2131.5, 2553.4, 2697.3, 2845, 2971, 3094.5, 3421.33, 3517, 3704, 3824.36, 4026, 4103.5, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(27, 50.613, 162.049, 235.200, 449.253, 649.376, 905.887, 1472.145, 1560.246, 1620.714, 1719.811, 2011.201, 2227.079, 2321.843, 2520.884, 3645.568, 3719.782, 4519.738, 5439.683, 5550.825, 5799.373, 5887.881, 5985.715, 8391.483, 8599.464, 8742.274, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(28, 1105.304, 1103.750, 1794.986, 1953.592, 2048.571, 2151.073, 2212.690, 2294.689, 2456.427, 2479.858, 2588.582, 2939.855, 3128.298, 3338.705, 3994.719, 5093.901, 5302.248, 6016.276, 6633.354, 7061.309, 7204.633, 7280.145, 7396.092, 7451.345, 7596.472, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(29, 50.613, 162.049, 235.200, 449.253, 649.376, 905.887, 1472.145, 1560.246, 1620.714, 1719.811, 2011.201, 2227.079, 2321.843, 2520.884, 3645.568, 3719.782, 4519.738, 5439.683, 5550.825, 5799.373, 5887.881, 5985.715, 8391.483, 8599.464, 8742.274, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(30, 256.393, 395.910, 563.166, 828.052, 1184.536, 1335.321, 1546.818, 1827.957, 2480.316, 2773.729, 3196.038, 3341.018, 3464.887, 3685.670, 3978.220, 4078.167, 4271.071, 4423.289, 4519.296, 4722.426, 4897.136, 5013.317, 5107.348, 5175.045, 5274.198, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(31, 62.317, 165.692, 274.382, 348.507, 415.855, 471.671, 528.891, 558.866, 656.594, 775.976, 876.664, 982.164, 1118.923, 1247.646, 1389.558, 1512.517, 1651.298, 1753.110, 1837.643, 1905.806, 1984.672, 2048.393, 2112.321, 2181.847, 2288.017, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(32, 53.066, 203.032, 479.499, 543.879, 743.276, 801.769, 892.304, 960.408, 1056.683, 1207.074, 1959.924, 2512.418, 2796.932, 2962.237, 4128.661, 4757.159, 5226.305, 7228.675, 8082.551, 8150.188, 8996.844, 9060.971, 9135.351, 9440.564, 10176.578, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(33, 59.069, 633.891, 735.346, 829.804, 1096.602, 1281.328, 1381.799, 1457.992, 1601.895, 1736.677, 1801.428, 1882.553, 2063.394, 2141.092, 2241.275, 2423.967, 2496.568, 2740.324, 3155.239, 3228.240, 3422.348, 3571.240, 3639.228, 3668.764, 3749.605, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(34, 62.266, 120.836, 185.376, 299.858, 459.254, 540.377, 640.285, 831.450, 895.198, 991.975, 1107.400, 1266.421, 1415.155, 1466.344, 1641.805, 1747.948, 1899.558, 2223.494, 2309.037, 2359.031, 2439.546, 2524.965, 2662.755, 2801.177, 2884.055, .99, 1, 15, 0, 1, 1)
 $SET_PRESET(35, 1193.150, 1501.169, 1584.422, 1760.128, 1876.764, 2057.868, 2297.103, 2900.218, 3614.225, 3719.350, 3956.729, 5413.109, 6072.599, 6354.645, 6882.175, 7042.264, 7340.854, 8751.580, 9774.188, 10410.871, 10575.217, 11393.946, 15018.148, 16121.814, 18907.158, .99, 1, 15, 0, 1, 1)
endin

 SEND_PRESET: ;1-16="Small Hall","Medium Hall","Large Hall","Huge Hall","Infinite Space","Dry Echos","Right","Comby 1","Comby 2","Octaves","TriTones","Big Dark","Metallic","Weird 1","Weird 2","Weird 3""Large Cymbal A","LargeCymbal B","Splash Cymbal A","Splash Cymbal B","Turkish Cymbal","Gong", "Small Gong","Metallic","Tubular Metallic")
 ;           N'set1'set2'set3'set4'set5'set6'set7'set8'set9'set10'set11'set12'set13'set14'set15'set16'set17'set18'set19'set20'set21'set22'set23'set24'set25'FBset'DFset'Qset'ERamp'ERSelect'EQselect)

*/

static std::map<std::string, Preset> &presets() {
    static bool initialized = false;
    static std::map<std::string, Preset> presets_;
    if (initialized == false) {
        initialized = true;
        presets_["Small Hall"] = {1, 102, 435, 735, 76.8, 114, 669.2, 739.7, 843.6, 272.72, 114.3, 963.2, 250.3, 373.73, 842, 999, 621, 210, 183, 578, 313, 792, 159.3, 401.5, 733, 1010, .93, 1, 22, .9, 2, 1};
        presets_["Medium Hall"] = {2, 57.8, 461.1, 141.6, 442.9, 395.4, 384.7, 156.3, 31.7, 47.7, 181.4, 82.3, 470.7, 283.7, 133.7, 128.5, 426.9, 274.1, 495, 112.3, 401.9, 126.5, 218.9, 374.8, 140.3, 171.3, .943, 1, .5, .9, 3, 1};
        presets_["Large Hall"] = {3, 23.24, 100.43, 45.58, 105.62, 226.26, 65.66, 216.33, 32.41, 244.91, 84.61, 349.42, 134.08, 444.19, 51.83, 32.42, 42.73, 125.7, 83.25, 23.83, 170.28, 116.83, 40.96, 53, 78.42, 29.42, .95, 1, .5, .9, 4, 1};
        presets_["Huge Hall"] = {4, 3.24, 10.43, 5.58, 105.62, 16.26, 65.66, 216.33, 2.41, 244.91, 4.61, 349.42, 134.08, 444.191, 51.83, 32.42, 2.73, 25.7, 83.25, 3.83, 170.28, 6.83, 40.96, 13, 8.42, 20.42, .95, 1, .724, .8, 5, 1};
        presets_["Infinite Space"] = {5, 3.24, 10.43, 5.58, 105.62, 16.26, 65.66, 216.33, 2.41, 244.91, 4.61, 349.42, 134.08, 444.191, 51.83, 32.42, 2.73, 25.7, 83.25, 3.83, 170.28, 6.83, 40.96, 13, 8.42, 20.42, 1, 1, .5, .5, 5, 1};
        presets_["Dry Echoes"] = {6, 200, 2000, 2, 2000, 200, 2000, 2, 200, 2, 2000, 2, 200, 2, 200, 2, 2000, 2, 200, 2, 2000, 200, 2000, 2, 2000, 200, .85, 1, .5, .9, 1, 1};
        presets_["Right"] = {7, 4.4, 10.8, 33.9, 77.23, 243, 3.1, 7.5, 26.68, 64.9, 111.11, 2, 5.5, 17.3, 53, 97.2, 3.6, 7.53, 26.75, 67, 113.2, 4.57, 10.67, 33.25, 75.3, 248, .95, 1, 21, .9, 1, 2};
        presets_["Comby 1"] = {8, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, .99, 1, 3.85, .9, 1, 1};
        presets_["Comby 2"] = {9, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, .995, 1, 2.85, .9, 1, 1};
        presets_["Octaves"] = {10, 320, 80, 320, 80, 2560, 640, 40, 2560, 10240, 80, 2560, 640, 160, 1280, 160, 640, 5120, 320, 40, 10240, 1280, 40, 5120, 320, 160, .995, 1, 70, .9, 1, 2};
        presets_["Tritones"] = {11, 369.99, 92.5, 370, 185, 65.41, 32.7, 261.63, 46.25, 261.63, 1046.5, 739.99, 1479.98, 130.81, 65.41, 23.13, 92.5, 46.25, 130.81, 185, 32.7, 65.41, 130.81, 523.25, 184.99, 92.5, .975, 1, 90, .9, 1, 3};
        presets_["Big Dark"] = {12, 41, 3.84, 50.28, 2.38, 19.71, 3.83, 83.27, 16.93, 27.95, 4.33, 88.41, 39.93, 95.02, 93.99, 84.19, 3.38, 79.5, 69.39, 32.79, 8.32, 97.16, 3.23, 28.84, 8.46, 71.69, .96, 1, 4, .5, 10, 2};
        presets_["Metallic"] = {13, 361.6, 66.9, 679.5, 251.6, 395.3, 166.4, 123.9, 314.6, 262.5, 182.9, 245.4, 40.4, 435.5, 253.9, 350.5, 527.1, 628.3, 365.2, 71.6, 699.6, 684.8, 560.1, 408.4, 55.4, 190, .995, 1, 35, .9, 3, 3};
        presets_["Weird 1"] = {};
        presets_["Weird 2"] = {};
        presets_["Weird 3"] = {};
        presets_["Large Cymbal A"] = {};
        presets_["Large Cymbal B"] = {};
        presets_["Splash Cymbal A"] = {};
        presets_["Splash Cymbal B"] = {};
        presets_["Turkish Cymbal"] = {};
        presets_["Gong"] = {};
        presets_["Small Gong"] = {};
        presets_["Metallic"] = {};
        presets_["Tubular Metallic"] = {35, 1193.150, 1501.169, 1584.422, 1760.128, 1876.764, 2057.868, 2297.103, 2900.218, 3614.225, 3719.350, 3956.729, 5413.109, 6072.599, 6354.645, 6882.175, 7042.264, 7340.854, 8751.580, 9774.188, 10410.871, 10575.217, 11393.946, 15018.148, 16121.814, 18907.158, .99, 1, 15, 0, 1, 1};
        presets_["35"] = {35, 1193.150, 1501.169, 1584.422, 1760.128, 1876.764, 2057.868, 2297.103, 2900.218, 3614.225, 3719.350, 3956.729, 5413.109, 6072.599, 6354.645, 6882.175, 7042.264, 7340.854, 8751.580, 9774.188, 10410.871, 10575.217, 11393.946, 15018.148, 16121.814, 18907.158, .99, 1, 15, 0, 1, 1};
    }
    return presets_;
};

// Different presets may have different numbers of taps.

struct EarlyReturnPreset {
    std::vector<MYFLT> taps_left;
    std::vector<MYFLT> taps_right;
};

static std::map<std::string, EarlyReturnPreset> &earlyReturnPresets() {
    static bool initialized = false;
    static std::map<std::string, EarlyReturnPreset> presets_;
    if (initialized == false) {
        initialized = true;
        presets_["None"] = {{}, {}};
        presets_["Small"] = {{0.0070, 0.5281, 0.0156, 0.5038, 0.0233, 0.3408, 0.0287, 0.1764, 0.0362, 0.2514, 0.0427, 0.1855, 0.0475, 0.2229, 0.0526, 0.1345, 0.0567, 0.1037, 0.0616, 0.0837, 0.0658, 0.0418, 0.0687, 0.0781, 0.0727, 0.0654, 0.0762, 0.0369, 0.0796, 0.0192, 0.0817, 0.0278, 0.0839, 0.0132, 0.0862, 0.0073, 0.0888, 0.0089, 0.0909, 0.0087, 0.0924, 0.0065, 0.0937, 0.0015, 0.0957, 0.0019, 0.0968, 0.0012, 0.0982, 0.0004}, 
        {0.0097, 0.3672, 0.0147, 0.3860, 0.0208, 0.4025, 0.0274, 0.3310, 0.0339, 0.2234, 0.0383, 0.1326, 0.0441, 0.1552, 0.0477, 0.1477, 0.0533, 0.2054, 0.0582, 0.1242, 0.0631, 0.0707, 0.0678, 0.1061, 0.0702, 0.0331, 0.0735, 0.0354, 0.0758, 0.0478, 0.0778, 0.0347, 0.0814, 0.0185, 0.0836, 0.0157, 0.0855, 0.0197, 0.0877, 0.0171, 0.0902, 0.0078, 0.0915, 0.0032, 0.0929, 0.0026, 0.0947, 0.0014, 0.0958, 0.0018, 0.0973, 0.0007, 0.0990, 0.0007}};
        presets_["Medium"] = {{0.0215, 0.3607, 0.0435, 0.2480, 0.0566, 0.3229, 0.0691, 0.5000, 0.0842, 0.1881, 0.1010, 0.2056, 0.1140, 0.1224, 0.1224, 0.3358, 0.1351, 0.3195, 0.1442, 0.2803, 0.1545, 0.1909, 0.1605, 0.0535, 0.1680, 0.0722, 0.1788, 0.1138, 0.1886, 0.0467, 0.1945, 0.1731, 0.2010, 0.0580, 0.2096, 0.0392, 0.2148, 0.0314, 0.2201, 0.0301, 0.2278, 0.0798, 0.2357, 0.0421, 0.2450, 0.0208, 0.2530, 0.0484, 0.2583, 0.0525, 0.2636, 0.0335, 0.2694, 0.0311, 0.2764, 0.0455, 0.2817, 0.0362, 0.2874, 0.0252, 0.2914, 0.0113, 0.2954, 0.0207, 0.2977, 0.0120, 0.3029, 0.0067, 0.3054, 0.0094, 0.3084, 0.0135, 0.3127, 0.0095, 0.3157, 0.0111, 0.3178, 0.0036, 0.3202, 0.0064, 0.3221, 0.0025, 0.3252, 0.0016, 0.3268, 0.0051, 0.3297, 0.0029, 0.3318, 0.0038, 0.3345, 0.0016, 0.3366, 0.0013, 0.3386, 0.0009, 0.3401, 0.0019, 0.3416, 0.0012, 0.3431, 0.0015, 0.3452, 0.0011, 0.3471, 0.0007, 0.3488, 0.0003}, 
        {0.0146, 0.5281, 0.0295, 0.3325, 0.0450, 0.3889, 0.0605, 0.2096, 0.0792, 0.5082, 0.0881, 0.1798, 0.1051, 0.3287, 0.1132, 0.1872, 0.1243, 0.1184, 0.1338, 0.1134, 0.1480, 0.1400, 0.1594, 0.2602, 0.1721, 0.0610, 0.1821, 0.1736, 0.1908, 0.0738, 0.1978, 0.1547, 0.2084, 0.0842, 0.2187, 0.0505, 0.2256, 0.0906, 0.2339, 0.0996, 0.2428, 0.0490, 0.2493, 0.0186, 0.2558, 0.0164, 0.2596, 0.0179, 0.2658, 0.0298, 0.2698, 0.0343, 0.2750, 0.0107, 0.2789, 0.0417, 0.2817, 0.0235, 0.2879, 0.0238, 0.2938, 0.0202, 0.2965, 0.0242, 0.3015, 0.0209, 0.3050, 0.0139, 0.3097, 0.0039, 0.3137, 0.0039, 0.3165, 0.0096, 0.3205, 0.0073, 0.3231, 0.0052, 0.3255, 0.0069, 0.3273, 0.0044, 0.3298, 0.0041, 0.3326, 0.0026, 0.3348, 0.0028, 0.3372, 0.0014, 0.3389, 0.0023, 0.3413, 0.0012, 0.3428, 0.0014, 0.3443, 0.0006, 0.3458, 0.0003, 0.3474, 0.0004, 0.3486, 0.0005 }};
        presets_["Large"] = {{0.0473, 0.1344, 0.0725, 0.5048, 0.0997, 0.2057, 0.1359, 0.2231, 0.1716, 0.4355, 0.1963, 0.1904, 0.2168, 0.2274, 0.2508, 0.0604, 0.2660, 0.1671, 0.2808, 0.1725, 0.3023, 0.0481, 0.3154, 0.1940, 0.3371, 0.0651, 0.3579, 0.0354, 0.3718, 0.0504, 0.3935, 0.1609, 0.4041, 0.1459, 0.4166, 0.1355, 0.4344, 0.0747, 0.4524, 0.0173, 0.4602, 0.0452, 0.4679, 0.0643, 0.4795, 0.0377, 0.4897, 0.0159, 0.4968, 0.0433, 0.5104, 0.0213, 0.5170, 0.0115, 0.5282, 0.0102, 0.5390, 0.0091, 0.5451, 0.0146, 0.5552, 0.0371, 0.5594, 0.0192, 0.5667, 0.0218, 0.5740, 0.0176, 0.5806, 0.0242, 0.5871, 0.0167, 0.5931, 0.0184, 0.6000, 0.0075, 0.6063, 0.0060, 0.6121, 0.0068, 0.6149, 0.0138, 0.6183, 0.0044, 0.6217, 0.0035, 0.6243, 0.0026, 0.6274, 0.0017, 0.6295, 0.0098, 0.6321, 0.0054, 0.6352, 0.0022, 0.6380, 0.0011, 0.6414, 0.0012, 0.6432, 0.0062, 0.6462, 0.0024, 0.6478, 0.0032, 0.6506, 0.0009}, 
        {0.0271, 0.5190, 0.0558, 0.1827, 0.0776, 0.3068, 0.1186, 0.2801, 0.1421, 0.1526, 0.1698, 0.3249, 0.1918, 0.1292, 0.2178, 0.2828, 0.2432, 0.1128, 0.2743, 0.1884, 0.2947, 0.2023, 0.3121, 0.1118, 0.3338, 0.0660, 0.3462, 0.0931, 0.3680, 0.1295, 0.3889, 0.1430, 0.4040, 0.0413, 0.4218, 0.1122, 0.4381, 0.1089, 0.4553, 0.0691, 0.4718, 0.0699, 0.4832, 0.0375, 0.4925, 0.0119, 0.5065, 0.0181, 0.5180, 0.0500, 0.5281, 0.0228, 0.5365, 0.0072, 0.5458, 0.0366, 0.5520, 0.0065, 0.5597, 0.0115, 0.5644, 0.0105, 0.5724, 0.0063, 0.5801, 0.0118, 0.5836, 0.0198, 0.5886, 0.0172, 0.5938, 0.0081, 0.5987, 0.0094, 0.6033, 0.0029, 0.6060, 0.0078, 0.6096, 0.0149, 0.6122, 0.0102, 0.6171, 0.0144, 0.6204, 0.0014, 0.6243, 0.0038, 0.6284, 0.0111, 0.6309, 0.0107, 0.6338, 0.0036, 0.6374, 0.0035, 0.6401, 0.0015, 0.6417, 0.0052, 0.6433, 0.0019, 0.6461, 0.0033, 0.6485, 0.0007}};
        presets_["Huge"] = {{0.0588, 0.6917, 0.1383, 0.2512, 0.2158, 0.5546, 0.2586, 0.2491, 0.3078, 0.1830, 0.3731, 0.3712, 0.4214, 0.1398, 0.4622, 0.1870, 0.5004, 0.1652, 0.5365, 0.2254, 0.5604, 0.1423, 0.5950, 0.1355, 0.6233, 0.1282, 0.6486, 0.1312, 0.6725, 0.1009, 0.7063, 0.0324, 0.7380, 0.0968, 0.7602, 0.0169, 0.7854, 0.0530, 0.8097, 0.0342, 0.8303, 0.0370, 0.8404, 0.0173, 0.8587, 0.0281, 0.8741, 0.0164, 0.8825, 0.0045, 0.8945, 0.0181, 0.9063, 0.0057, 0.9136, 0.0030, 0.9214, 0.0065, 0.9296, 0.0059, 0.9373, 0.0021, 0.9462, 0.0087, 0.9541, 0.0035, 0.9605, 0.0013, 0.9648, 0.0043, 0.9691, 0.0014, 0.9746, 0.0011, 0.9774, 0.0032, 0.9818, 0.0020, 0.9853, 0.0042, 0.9889, 0.0030, 0.9923, 0.0034, 0.9941, 0.0021, 0.9976, 0.0009, 0.9986, 0.0008}, 
        {0.0665, 0.4406, 0.1335, 0.6615, 0.1848, 0.2284, 0.2579, 0.4064, 0.3293, 0.1433, 0.3756, 0.3222, 0.4157, 0.3572, 0.4686, 0.3280, 0.5206, 0.1134, 0.5461, 0.0540, 0.5867, 0.0473, 0.6281, 0.1018, 0.6516, 0.1285, 0.6709, 0.0617, 0.6979, 0.0360, 0.7173, 0.1026, 0.7481, 0.0621, 0.7690, 0.0585, 0.7943, 0.0340, 0.8072, 0.0170, 0.8177, 0.0092, 0.8345, 0.0369, 0.8511, 0.0369, 0.8621, 0.0251, 0.8740, 0.0109, 0.8849, 0.0135, 0.8956, 0.0118, 0.9026, 0.0187, 0.9110, 0.0182, 0.9225, 0.0034, 0.9310, 0.0083, 0.9354, 0.0058, 0.9420, 0.0040, 0.9464, 0.0028, 0.9549, 0.0090, 0.9590, 0.0076, 0.9654, 0.0030, 0.9691, 0.0041, 0.9729, 0.0009, 0.9757, 0.0024, 0.9787, 0.0049, 0.9823, 0.0040, 0.9847, 0.0025, 0.9898, 0.0005, 0.9922, 0.0022, 0.9935, 0.0025, 0.9964, 0.0027, 0.9992, 0.0007}};
        presets_["Long Random"] = {{0.0131, 0.6191, 0.0518, 0.4595, 0.0800, 0.4688, 0.2461, 0.2679, 0.3826, 0.1198, 0.5176, 0.2924, 0.6806, 0.0293, 0.8211, 0.0327, 1.0693, 0.3318, 1.2952, 0.1426, 1.3079, 0.1021, 1.4337, 0.1293, 1.4977, 0.2383, 1.6702, 0.0181, 1.7214, 0.2042, 1.8849, 0.0780, 2.1279, 0.0160, 2.2836, 0.0061, 2.4276, 0.0390, 2.5733, 0.1090, 2.7520, 0.0047, 2.8650, 0.0077, 3.1026, 0.0005}, 
        {0.1591, 0.4892, 0.2634, 0.1430, 0.3918, 0.0978, 0.5004, 0.0675, 0.7004, 0.1285, 0.7251, 0.0251, 0.9368, 0.4531, 1.0770, 0.0022, 1.1426, 0.0132, 1.3189, 0.1608, 1.3550, 0.0512, 1.4347, 0.0224, 1.4739, 0.1401, 1.6996, 0.1680, 1.9292, 0.1481, 2.1435, 0.2463, 2.1991, 0.1748, 2.3805, 0.1802, 2.4796, 0.0105, 2.6615, 0.0049, 2.8115, 0.0517, 2.9687, 0.0468, 2.9899, 0.0095, 3.1554, 0.0496}};
        presets_["Short Backwards"] = {{0.0022, 0.0070, 0.0040, 0.0014, 0.0054, 0.0120, 0.0085, 0.0075, 0.0106, 0.0156, 0.0141, 0.0089, 0.0176, 0.0083, 0.0200, 0.0227, 0.0225, 0.0189, 0.0253, 0.0121, 0.0284, 0.0118, 0.0367, 0.0193, 0.0431, 0.0163, 0.0477, 0.0260, 0.0558, 0.0259, 0.0632, 0.0515, 0.0694, 0.0266, 0.0790, 0.0279, 0.0873, 0.0712, 0.1075, 0.1212, 0.1286, 0.0938, 0.1433, 0.1305, 0.1591, 0.0929, 0.1713, 0.2410, 0.1982, 0.1409, 0.2144, 0.3512, 0.2672, 0.5038, 0.3293, 0.3827}, 
        {0.0019, 0.0107, 0.0030, 0.0031, 0.0049, 0.0068, 0.0066, 0.0050, 0.0098, 0.0090, 0.0132, 0.0080, 0.0165, 0.0085, 0.0196, 0.0071, 0.0221, 0.0143, 0.0247, 0.0086, 0.0316, 0.0164, 0.0374, 0.0160, 0.0416, 0.0110, 0.0511, 0.0167, 0.0619, 0.0191, 0.0730, 0.0233, 0.0887, 0.0313, 0.1037, 0.0484, 0.1114, 0.0912, 0.1219, 0.0980, 0.1482, 0.1220, 0.1806, 0.2021, 0.2057, 0.2059, 0.2382, 0.2379, 0.2550, 0.2536, 0.3112, 0.6474}};
        presets_["Long Backwards"] = {{0.0021, 0.0008, 0.0050, 0.0006, 0.0065, 0.0007, 0.0092, 0.0014, 0.0124, 0.0028, 0.0145, 0.0032, 0.0166, 0.0015, 0.0225, 0.0018, 0.0294, 0.0030, 0.0345, 0.0077, 0.0405, 0.0056, 0.0454, 0.0096, 0.0508, 0.0088, 0.0593, 0.0082, 0.0643, 0.0074, 0.0743, 0.0182, 0.0874, 0.0103, 0.0986, 0.0270, 0.1143, 0.0135, 0.1370, 0.0327, 0.1633, 0.0420, 0.1823, 0.0708, 0.2028, 0.0842, 0.2258, 0.0962, 0.2482, 0.0513, 0.2856, 0.1035, 0.3132, 0.1229, 0.3398, 0.0721, 0.3742, 0.0996, 0.4199, 0.1817, 0.4914, 0.3000, 0.5557, 0.1649, 0.6181, 0.4180, 0.6689, 0.5216, 0.7310, 0.5185}, 
        {0.0024, 0.0007, 0.0053, 0.0006, 0.0090, 0.0034, 0.0138, 0.0026, 0.0196, 0.0016, 0.0250, 0.0080, 0.0292, 0.0051, 0.0346, 0.0039, 0.0409, 0.0089, 0.0459, 0.0067, 0.0589, 0.0132, 0.0702, 0.0192, 0.0781, 0.0211, 0.0964, 0.0239, 0.1052, 0.0201, 0.1212, 0.0226, 0.1428, 0.0147, 0.1547, 0.0418, 0.1849, 0.0232, 0.2110, 0.0975, 0.2425, 0.0620, 0.2851, 0.0963, 0.3366, 0.1248, 0.3645, 0.1321, 0.4079, 0.1293, 0.4433, 0.1425, 0.5031, 0.3787, 0.5416, 0.5061, 0.6336, 0.2865, 0.7434, 0.6477}};
        presets_["Strange1"] = {{0.0137, 0.2939, 0.0763, 0.8381, 0.2189, 0.7019, 0.2531, 0.2366, 0.3822, 0.3756, 0.4670, 0.0751, 0.4821, 0.0870, 0.4930, 0.0794, 0.5087, 0.1733, 0.5633, 0.0657, 0.6078, 0.0218, 0.6410, 0.0113, 0.6473, 0.0246, 0.6575, 0.0513, 0.6669, 0.0431, 0.6693, 0.0392, 0.6916, 0.0050, 0.6997, 0.0192, 0.7091, 0.0186, 0.7174, 0.0105, 0.7284, 0.0254, 0.7366, 0.0221, 0.7390, 0.0112, 0.7446, 0.0029, 0.7470, 0.0211, 0.7495, 0.0006}, 
        {0.0036, 0.0052, 0.0069, 0.0105, 0.0096, 0.0190, 0.0138, 0.0235, 0.0150, 0.0018, 0.0231, 0.0012, 0.0340, 0.0022, 0.0355, 0.0154, 0.0415, 0.0057, 0.0538, 0.0237, 0.0722, 0.0037, 0.0839, 0.0291, 0.1027, 0.0500, 0.1163, 0.0367, 0.1375, 0.0114, 0.1749, 0.0156, 0.2002, 0.0635, 0.2215, 0.0660, 0.2777, 0.0517, 0.3481, 0.1666, 0.3871, 0.2406, 0.4851, 0.1022, 0.5305, 0.2043, 0.5910, 0.4109, 0.6346, 0.5573, 0.7212, 0.5535, 0.8981, 0.5854}};
        presets_["Strange2"] = {{0.0306, 0.3604, 0.2779, 0.6327, 0.3687, 0.2979, 0.5186, 0.4202, 0.6927, 0.3695, 0.7185, 0.2370, 0.8703, 0.3283, 0.9138, 0.1334, 0.9610, 0.1183, 1.0656, 0.2089, 1.1153, 0.0835, 1.1933, 0.0954, 1.1974, 0.0609, 1.2972, 0.1078, 1.3243, 0.0720, 1.3498, 0.0840, 1.4191, 0.0694, 1.4479, 0.0572, 1.4992, 0.0449, 1.5256, 0.0186, 1.5704, 0.0470, 1.5852, 0.0202, 1.6090, 0.0106, 1.6165, 0.0302, 1.6440, 0.0204, 1.6557, 0.0042, 1.6582, 0.0223, 1.6810, 0.0054, 1.6814, 0.0064, 1.6943, 0.0075, 1.6988, 0.0032, 1.7064, 0.0027, 1.7073, 0.0064, 1.7124, 0.0091, 1.7150, 0.0015, 1.7218, 0.0043, 1.7308, 0.0116, 1.7335, 0.0122, 1.7355, 0.0011, 1.7433, 0.0154, 1.7466, 0.0084, 1.7487, 0.0139, 1.7503, 0.0123, 1.7520, 0.0036, 1.7561, 0.0097, 1.7565, 0.0041, 1.7586, 0.0016, 1.7657, 0.0132, 1.7704, 0.0038, 1.7748, 0.0020, 1.7777, 0.0053, 1.7783, 0.0056, 1.7791, 0.0017, 1.7818, 0.0058, 1.7822, 0.0089, 1.7844, 0.0074, 1.7863, 0.0009, 1.7878, 0.0016, 1.7899, 0.0061, 1.7919, 0.0073, 1.7925, 0.0025, 1.7941, 0.0045, 1.7956, 0.0060, 1.7958, 0.0088, 1.7963, 0.0010, 1.7965, 0.0006, 1.7977, 0.0078, 1.7988, 0.0026}, 
        {0.0011, 0.0055, 0.0022, 0.0063, 0.0027, 0.0089, 0.0034, 0.0009, 0.0049, 0.0010, 0.0064, 0.0005, 0.0069, 0.0044, 0.0091, 0.0027, 0.0103, 0.0099, 0.0112, 0.0017, 0.0131, 0.0018, 0.0142, 0.0008, 0.0159, 0.0010, 0.0188, 0.0034, 0.0207, 0.0055, 0.0245, 0.0005, 0.0262, 0.0094, 0.0312, 0.0057, 0.0344, 0.0051, 0.0402, 0.0044, 0.0404, 0.0102, 0.0433, 0.0044, 0.0435, 0.0034, 0.0489, 0.0087, 0.0512, 0.0108, 0.0605, 0.0046, 0.0702, 0.0010, 0.0734, 0.0121, 0.0839, 0.0135, 0.0985, 0.0151, 0.1014, 0.0203, 0.1041, 0.0043, 0.1114, 0.0150, 0.1216, 0.0182, 0.1293, 0.0220, 0.1299, 0.0169, 0.1312, 0.0046, 0.1453, 0.0046, 0.1527, 0.0062, 0.1545, 0.0192, 0.1578, 0.0092, 0.1655, 0.0053, 0.1754, 0.0301, 0.1967, 0.0122, 0.2289, 0.0233, 0.2353, 0.0131, 0.2632, 0.0396, 0.2873, 0.0171, 0.3348, 0.0454, 0.3872, 0.0398, 0.4484, 0.0244, 0.4913, 0.0693, 0.5424, 0.0820, 0.5668, 0.1112, 0.6054, 0.0635, 0.6669, 0.1016, 0.7211, 0.1217, 0.7541, 0.1756, 0.8759, 0.1688, 0.9106, 0.1932, 1.0384, 0.1542, 1.0732, 0.1598, 1.0767, 0.2409, 1.0988, 0.1879, 1.2422, 0.3049, 1.3480, 0.3001, 1.4961, 0.3374, 1.5886, 0.2791, 1.5957, 0.3366, 1.8248, 0.2962}};
    }
    return presets_;
};

struct EqualizerPreset {
    MYFLT gain[10];
};

struct MasterPreset {
    Preset preset;
    EarlyReturnPreset earlyReturnPreset;
    EqualizerPreset equalizerPreset;
};

static std::map<std::string, EqualizerPreset> &equalizerPresets() {
    static bool initialized = false;
    static std::map<std::string, EqualizerPreset> presets_;
    if (initialized == false) {
        initialized = true;
        presets_["flat"] =        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        presets_["high cut 1"] =  {1, 1, 1, 1, 1, .99, .98, .97, .96, .95};
        presets_["high cut 2"] =  {1, 1, 1, .95, .9, .85, .8, .75, .7, .65};
        presets_["low cut 1"] =   {.9, .93, .96, .98, 1, 1, 1, 1, 1, 1};
        presets_["low cut 2"] =   {.65, .7, .75, .8, .85, .9, .95, 1, 1, 1};
        presets_["band pass 1"] = {.25, .75, 1, 1, 1, 1, 1, 1, .75, .25};
        presets_["band pass 2"] = {.1, .25, .5, .75, 1, 1, .75, .5, .25, .1};
        presets_["2 bands"] =     {.25, .75, 1, .75, .25, .25, .75, 1, .75, .25};
        presets_["3 bands"] =     {25, 1, 1, .25, 1, 1, .25, 1, 1, .25};
        presets_["evens"] =       {.1, 1, .1, 1, .1, 1, .1, 1, .1, 1};
        presets_["odds"] =        {1, .1, 1, .1, 1, .1, 1, .1, 1, .1};
    }
    return presets_;
};

/*
opcode randomdel,a,a
adel xin
krand chnget "random"
krslow chnget "rslow"
krfast chnget "rfast"
krmax chnget "rmax"
if krand=1 then
atime randomi krslow,krfast,krfast  ;calculate random cps
adelayA randi krmax,atime   ;calculate value changes expressed as 0-.95
adel=adel+(adel*adelayA)
else
xout adel
endif
endop
*/


struct RandomizeDelay {
    Preset preset;
    void initialize(CSOUND *csound, Preset preset_) {
    };
    void process(CSOUND *csound);
    
};

struct Multitaps {
    gam::Delay<> delay;
    std::vector<MYFLT> times;
    std::vector<MYFLT> gains;
    int tap_count = 0;
    MasterPreset master_preset;
    void initialize(CSOUND *csound, const std::vector<MYFLT> &parameters, MasterPreset master_preset_) {
        master_preset = master_preset_;
        MYFLT maximum_delay = 0;
        for (int i = 0, n = parameters.size(); i < n; ) {
            if (maximum_delay < parameters[i]) {
                maximum_delay = parameters[i];
            }
            times.push_back(parameters[i]);
            ++i;
            gains.push_back(parameters[i]);
            ++i;
            ++tap_count;
        }
        delay.delay(maximum_delay + .1);
    }
    virtual MYFLT operator () (MYFLT in) {
        delay(in);
        MYFLT result = 0;
        for (int tap = 0; tap < tap_count; ++tap) {
            result += (delay.read(times[tap]) * gains[tap] * master_preset.preset.ERamp);
        }
        return result;        
    }
};

struct MeshEQ {
    gam::Delay<> delay[4];
    Equalizer equalizer[4];
    void initialize(CSOUND *csound, MasterPreset masterPreset_) {
        delay[0].maxDelay(1.);
        delay[1].maxDelay(1.);
        delay[2].maxDelay(1.);
        delay[3].maxDelay(1.);
        equalizer[0].initialize(csound, masterPreset_);
    };
    void operator () (
        /* Outputs: */
        MYFLT &aUout, MYFLT &aRout, MYFLT &aDout, MYFLT &aLout, 
        /* Inputs: */ 
        MYFLT aUin, MYFLT aRin, MYFLT aDin, MYFLT aLin, MYFLT adel, MYFLT kFB) {
            MYFLT afactor = (aUin + aRin + aDin + aLin) * -.5;
            delay[0](aUin + afactor);
            aUout = delay[0].read(adel);
            delay[1](aRin + afactor);
            aRout = delay[1].read(adel);
            delay[2](aDin + afactor);
            aDout = delay[2].read(adel);
            delay[3](aLin + afactor);
            aLout = delay[3].read(adel);
            aUout = equalizer[0](aUout) * kFB;
            aUout = equalizer[1](aUout) * kFB;
            aUout = equalizer[2](aUout) * kFB;
            aUout = equalizer[3](aUout) * kFB;
    };
};
  
// The order of processing is:
// 2 multitap delays.
// 25 mesh nodes, each with:
//      4 variable delays, with randomized delay times.
//      4 equalizers, each with:
//          10 parametric equalizers (biquad filters).
//          1 level balancer.
//          1 DC blocker.
// 2 DC blockers.     

struct MVerb {
    bool initialized = false;
    CSOUND *csound = nullptr;
    MasterPreset master_preset;
    MYFLT left_in = 0;
    MYFLT right_in = 0;
    MYFLT left_out = 0;
    MYFLT right_out = 0;
    Multitaps multitaps_left;
    Multitaps multitaps_right;
    int frames_per_second = 0;
    MYFLT seconds_per_frame = 0;
    int frames_per_block = 0;
    MYFLT aAU = 0.;
    MYFLT aAR = 0.;   
    MYFLT aAD = 0.; 
    MYFLT aAL = 0.;
    MYFLT aBU = 0.;
    MYFLT aBR = 0.;   
    MYFLT aBD = 0.; 
    MYFLT aBL = 0.;
    MYFLT aCU = 0.;
    MYFLT aCR = 0.;   
    MYFLT aCD = 0.; 
    MYFLT aCL = 0.;
    MYFLT aDU = 0.;
    MYFLT aDR = 0.;   
    MYFLT aDD = 0.; 
    MYFLT aDL = 0.;
    MYFLT aEU = 0.;
    MYFLT aER = 0.;   
    MYFLT aED = 0.; 
    MYFLT aEL = 0.;
    MYFLT aFU = 0.;
    MYFLT aFR = 0.;   
    MYFLT aFD = 0.; 
    MYFLT aFL = 0.;
    MYFLT aGU = 0.;
    MYFLT aGR = 0.;   
    MYFLT aGD = 0.; 
    MYFLT aGL = 0.;
    MYFLT aHU = 0.;
    MYFLT aHR = 0.;   
    MYFLT aHD = 0.; 
aHL = 0.;
aIU = 0.;
aIR = 0.;   
aID = 0.; 
aIL = 0.;
aJU = 0.;
aJR = 0.;   
aJD = 0.; 
aJL = 0.;
aKU = 0.;
aKR = 0.;   
aKD = 0.; 
aKL = 0.;
aLU = 0.;
aLR = 0.;   
aLD = 0.; 
aLL = 0.;
aMU = 0.;
aMR = 0.;   
aMD = 0.; 
aML = 0.;
aNU = 0.;
aNR = 0.;   
aND = 0.; 
aNL = 0.;
aOU = 0.;
aOR = 0.;   
aOD = 0.; 
aOL = 0.;
aPU = 0.;
aPR = 0.;   
aPD = 0.; 
aPL = 0.;
aQU = 0.;
aQR = 0.;   
aQD = 0.; 
aQL = 0.;
aRU = 0.;
aRR = 0.;   
aRD = 0.; 
aRL = 0.;
aSU = 0.;
aSR = 0.;   
aSD = 0.; 
aSL = 0.;
aTU = 0.;
aTR = 0.;   
aTD = 0.; 
aTL = 0.;
aUU = 0.;
aUR = 0.;   
aUD = 0.; 
aUL = 0.;
aVU = 0.;
aVR = 0.;   
aVD = 0.; 
aVL = 0.;
aWU = 0.;
aWR = 0.;   
aWD = 0.; 
aWL = 0.;
aXU = 0.;
aXR = 0.;   
aXD = 0.; 
aXL = 0.;
aYU = 0.;
aYR = 0.;   
aYD = 0.; 
aYL = 0.;

    
    void initialize(CSOUND *csound_) {
        if (initialized == false) {
            initialized = true;
            csound = csound_;
            frames_per_second = csound->GetSr(csound);
            seconds_per_frame = 1.0 / MYFLT(frames_per_second);
            frames_per_block = csound->GetKsmps(csound);
            gam::sampleRate(frames_per_second);
        };
    };
    void set_preset(const char *name) {
        master_preset.preset = presets()[name];
    };
    void set_early_return_preset(const char *name) {
        master_preset.earlyReturnPreset = earlyReturnPresets()[name];
        multitaps_left.initialize(csound, master_preset.earlyReturnPreset.taps_left, master_preset);
        multitaps_right.initialize(csound, master_preset.earlyReturnPreset.taps_right, master_preset);
    };
    void set_equalizer_preset(const char *name) {
        master_preset.equalizerPreset = equalizerPresets()[name];
    };
    void process(CSOUND *csound) {
        MYFLT out_left = multitap_left(*left_in);
        MYFLT out_right = multitap_right(*right_in);
         
    };
    void control(CSOUND *csound, const char *parameter, MYFLT value) {
    };
};

class MVerbOpcode  : public csound::OpcodeBase<MVerbOpcode>
{
public:
  // Outputs.
  MYFLT *out_left;
  MYFLT *out_right;
  // Inputs.
  MYFLT *in_left;
  MYFLT *in_right;
  STRINGDAT *preset;
  STRINGDAT *early_return_preset;
  STRINGDAT *equalizer_preset;
  STRINGDAT *parameter;
  MYFLT *value;
  // State.
  MVerb *mverb;
  int init(CSOUND *csound)
  {
      if (mverb == nullptr) {
          mverb = new MVerb();
      }
      mverb->initialize(csound);
      mverb->set_preset(preset->data);
      mverb->set_early_return_preset(early_return_preset->data);
      mverb->set_equalizer_preset(equalizer_preset->data);
      return OK;
  }
  int kontrol(CSOUND *csound)
  {
      if (mverb != nullptr) {
          mverb->process(csound);
      }
      return OK;
  }
};

extern "C" {

  PUBLIC int csoundModuleInit_mverb(CSOUND *csound)
  {
      int status = csound->AppendOpcode(csound,
                                        (char*)"MVerb",
                                        sizeof(MVerbOpcode),
                                        0,
                                        3,
                                        (char*)"k",
                                        (char*)"kio",
                                        (int(*)(CSOUND*,void*)) MVerbOpcode::init_,
                                        (int(*)(CSOUND*,void*)) MVerbOpcode::kontrol_,
                                        (int (*)(CSOUND*,void*)) 0);
      return status;
  }

#ifndef INIT_STATIC_MODULES
  PUBLIC int csoundModuleCreate(CSOUND *csound)
  {
      return 0;
  }

  PUBLIC int csoundModuleInit(CSOUND *csound)
  {
      return csoundModuleInit_mverb(csound);
  }

  PUBLIC int csoundModuleDestroy(CSOUND *csound)
  {
      return 0;
  }
#endif
}
