/*
 * C S O U N D
 *
 * L I C E N S E
 *
 * This software is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#pragma oncde
#if defined(_MSC_VER) && !defined(__GNUC__)
#pragma warning (disable:4786)
#endif

#include "Platform.hpp"
#ifdef SWIG
%module CsoundAC
%{
#include "Node.hpp"
#include "Counterpoint.hpp"
#include <cmath>
%}
%include "std_vector.i"
%template(IntVector) std::vector<int>;
#else
#include "Node.hpp"
#include "Counterpoint.hpp"
#include <cmath>
#endif

namespace csound
{
/**
 * Uses Bill Schottstaedt's species counterpoint generator code
 * to either (a) generate a counterpoint in species 1, 2, or 3
 * for a cantus firmus selected from notes generated by child nodes,
 * or (b) attempt to correct the voice leading for species 1, 2, or 3
 * counterpoint in notes generated by child nodes.
 */
class SILENCE_PUBLIC CounterpointNode :
    public Node,
    public Counterpoint
{
public:
    enum
    {
        GenerateCounterpoint = 0,
        CorrectCounterpoint = 1
    };
    int generationMode;
    virtual int getGenerationMode() const {
        return generationMode;
    }
    virtual void setGenerationMode(int value) {
        generationMode = value;
    }
    int musicMode;
    virtual int getMusicMode() const {
        return musicMode;
    }
    virtual void setMusicMode(int value) {
            musicMode = value;
    }
    int species;
    virtual int getSpecies() const {
        return species;
    }
    virtual void setSpecies(int value) {
            species = value;
    }
    size_t voices;
    virtual size_t getVoices() const {
        return voices;
    }
    virtual void setVoices(size_t value) {
            voices = value;
    }
    double secondsPerPulse;
    virtual double getSecondsPerPulse() const {
        return secondsPerPulse;
    }
    virtual void setSecondsPerPulse(double value) {
            secondsPerPulse = value;
    }
    std::vector<int> voiceBeginnings;
    virtual std::vector<int> &getVoiceBeginnings() {
        return voiceBeginnings;
    }
    virtual void setVoiceBeginnings(const std::vector<int> &value) {
            voiceBeginnings = value;
    }
    CounterpointNode();
    virtual ~CounterpointNode();
    virtual void transform(Score &score);
};

}
